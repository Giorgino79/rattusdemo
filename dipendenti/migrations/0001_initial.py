# Generated by Django 5.2 on 2025-04-20 02:22

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("automezzi", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Dipendente",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "livello",
                    models.CharField(
                        choices=[
                            ("totale", "Tutte le autorizzazioni"),
                            (
                                "contabile",
                                "anagrafica, contabilità, automezzi, servizi",
                            ),
                            ("operativo", "automezzi, servizi, magazzino"),
                            ("operatore", "servizi, magazzino(mezzo affidato)"),
                        ],
                        default="operatore",
                        max_length=30,
                    ),
                ),
                ("indirizzo", models.CharField(blank=True, max_length=500, null=True)),
                (
                    "CF",
                    models.CharField(
                        blank=True,
                        max_length=16,
                        null=True,
                        verbose_name="Codice Fiscale",
                    ),
                ),
                (
                    "carta_d_identità",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        null=True,
                        verbose_name="Numero della carta di identità",
                    ),
                ),
                (
                    "patente_di_guida",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        null=True,
                        verbose_name="Numero della patente di guida",
                    ),
                ),
                (
                    "foto_dipendente",
                    models.ImageField(
                        blank=True, null=True, upload_to="media/dipendenti"
                    ),
                ),
                (
                    "posizione_inail",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                (
                    "posizione_inps",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                (
                    "foto_carta_identità",
                    models.ImageField(
                        blank=True, null=True, upload_to="media/dipendenti"
                    ),
                ),
                (
                    "foto_codice_fiscale",
                    models.ImageField(
                        blank=True, null=True, upload_to="media/dipendenti"
                    ),
                ),
                (
                    "foto_patente",
                    models.ImageField(
                        blank=True, null=True, upload_to="media/dipendenti"
                    ),
                ),
                (
                    "all1",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to="media/dipendenti",
                        verbose_name="allegato visibile al dipendente",
                    ),
                ),
                (
                    "all2",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to="media/dipendenti",
                        verbose_name="allegato visibile al dipendente",
                    ),
                ),
                (
                    "all3",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to="media/dipendenti",
                        verbose_name="allegato non visibile al dipendente",
                    ),
                ),
                (
                    "all4",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to="media/dipendenti",
                        verbose_name="allegato non visibile al dipendente",
                    ),
                ),
                ("note", models.TextField(blank=True, max_length=4000, null=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="dipendente_set",
                        related_query_name="dipendente",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="dipendente_set",
                        related_query_name="dipendente",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Giornata",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("data", models.DateField(auto_now_add=True)),
                ("ora_inizio_mattina", models.TimeField(blank=True, null=True)),
                ("ora_fine_mattina", models.TimeField(blank=True, null=True)),
                ("ora_inizio_pomeriggio", models.TimeField(blank=True, null=True)),
                ("ora_fine_pomeriggio", models.TimeField(blank=True, null=True)),
                ("chiudi_giornata", models.BooleanField(default=False)),
                (
                    "mezzo",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="automezzi.automezzo",
                    ),
                ),
                (
                    "operatore",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("operatore", "data")},
            },
        ),
    ]
